# Common path prefix
path_prefix: ${oc.env:HOME}/lsdex

# Short description for manually tagging runs, to be set via hydra CLI
descr: ''

# Generate random two-word codename using custom omgegaconf resolver
shortname: ${randomname:}${descr}

# Time stamp in ISO 8601-like format
# timestamp: ${now:%Y-%m-%d_%H-%M-%S}
timestamp: ${now:%m-%d_%H-%M}

# Version tag
v: v1

hydra:
  run:
    # Where to write logs and config copies
    # dir: ${path_prefix}/${v}/${setup}/${hydra.job.name}/${timestamp}_${shortname}
    dir: ${path_prefix}/${v}/inference/${setup}/${hydra.job.name}

setup: crunchy1


common:
  roi: 18_micron
  experiment: zebrafinch
  setup: ${setup}
  db_host: cajalg001
  db_name: zf_crunchy18a

  voxel_size: [20, 9, 9]
  block_size: [3600, 3600, 3600]
  context: [240, 243, 243]

  # raw_file: /cajal/scratch/projects/misc/mdraw/data/nseg_roi_containers/zf_benchmark_roi.json
  raw_file: /cajal/scratch/projects/misc/mdraw/data/nseg_roi_containers/zf_${common.roi}_roi.json
  mask_file: /cajal/scratch/projects/misc/mdraw/data/funke/zebrafinch/testing/ground_truth/data.zarr


  # Output path (affinities, ...)
  out_file: ${path_prefix}/${v}/inference/${setup}/${common.roi}/affs.zarr
  affs_file: ${common.out_file}
  fragments_file: ${path_prefix}/${v}/inference/${setup}/${common.roi}/frag.zarr
  seg_file: ${path_prefix}/${v}/inference/${setup}/${common.roi}/seg.zarr

  pybin: /cajal/scratch/projects/misc/mdraw/anaconda3/envs/nseg/bin/python

  raw_dataset: volumes/raw
  mask_dataset: volumes/neuropil_mask
  affs_dataset: /volumes/affs
  fragments_dataset: /volumes/fragments
  seg_dataset: volumes/segmentation_40  # TODO

  run_type: ${common.roi}_roi_masked
  edges_collection: edges_hist_quant_75



i1_predict:
  model_path: /cajal/scratch/projects/misc/mdraw/lsdex/v1/train_mtlsd/06-23_05-46_crunchy-staff/model_checkpoint_8000.pt

  num_workers: 100
  slurm_options: ["--ntasks=1", "--time=1-0", "--mem=100G", "--cpus-per-task=24", "--gres=gpu:1", "--job-name=ns01pr"]

  # net_input_shape: [84, 268, 268]
  net_input_shape: [96, 484, 484]
  net_offset: [40, 40, 40]

  output_cfg:
    lsds:       {idx: 0, out_dims: 10, out_dtype: uint8,   squeeze: true, scale: 255  }
    affs:       {idx: 1, out_dims:  3, out_dtype: uint8,   squeeze: true, scale: 255  }
    boundaries: {idx: 2, out_dims:  1, out_dtype: uint8,   squeeze: true, scale: 255  }
    hardness:   {idx: 3, out_dims:  1, out_dtype: float32, squeeze: true, scale:   0.5}


i2_extract_fragments:
  num_workers: 100
  fragments_in_xy: True
  epsilon_agglomerate: 0.1
  filter_fragments: 0.05
  slurm_options: ["--ntasks=1", "--time=1-0", "--mem=200G", "--cpus-per-task=24", "--job-name=ns02ex"]


i3_agglomerate:
  num_workers: 64
  merge_function: hist_quant_75
  slurm_options: ["--ntasks=1", "--time=1-0", "--mem=400G", "--cpus-per-task=24", "--job-name=ns03ag"]


i4_find_segments:
  num_workers: 32
  thresholds_minmax: [0, 1]
  thresholds_step: 0.02

i5_extract_segmentation:
  num_workers: 64
  threshold: 0.4

i6_evaluate_annotations:
  num_workers: 4
  edges_db_host: ${common.db_host}
  edges_db_name: ${common.db_name}
  scores_db_name: scores_${common.db_name}
  annotations_db_host: ${common.db_host}
  annotations_db_name: annotations
  annotations_skeletons_collection_name: zebrafinch
  node_components: zebrafinch_components
  node_mask: zebrafinch_mask
  # roi_offset: [50800, 43200, 44100]  # 11u
  # roi_shape: [10800, 10800, 10800]  # 11u
  # roi_offset: [40000, 32400, 33300]  # 32u
  # roi_shape: [32400, 32400, 32400]  # 32u
  # roi_offset: [4000, 7200, 4500]  # benchmark_roi
  # roi_shape: [106000, 83700, 87300]  # benchmark_roi
  thresholds_minmax: [0.4, 1]
  thresholds_step: 1
